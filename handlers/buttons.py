from telegram import Update, LabeledPrice
from telegram.ext import ContextTypes
from core.config import PROVIDER_TOKEN
from services.supabase_service import get_user_usage
from .menu import main_menu_keyboard
import json

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /start
    if update.message:
        await update.message.reply_text(
            text="–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç Visio, –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.",
            reply_markup=main_menu_keyboard()
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
    query = update.callback_query
    if not query:
        return
    await query.answer()

    user_id = str(query.from_user.id)
    user_usage = await get_user_usage(user_id)

        if query.data == "start":
        await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç Visio...", reply_markup=main_menu_keyboard())
    elif query.data == "generate":
        await query.edit_message_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        context.user_data["awaiting_prompt"] = True
    elif query.data == "stats":
        remaining = max(0, user_usage["limit"] - user_usage["count"])
        await query.edit_message_text(
            text=f"üìä –¢–≤–æ–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∏–∑ {user_usage['limit']}",
            reply_markup=main_menu_keyboard()
        )
    elif query.data == "buy":
        prices = [LabeledPrice("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", 50000)]
        provider_data = {
            "receipt": {
                "items": [{
                    "description": "100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                    "quantity": 1,
                    "amount": {"value": 500, "currency": "RUB"},
                    "vat_code": 1,
                    "payment_mode": "full_payment",
                    "payment_subject": "commodity"
                }],
                "tax_system_code": 1
            }
        }
        await context.bot.send_invoice(
            chat_id=query.message.chat_id,
            title="–ü–æ–∫—É–ø–∫–∞ 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            description="–¢—ã –ø–æ–ª—É—á–∏—à—å 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            payload="buy_100",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="buy",
            need_email=True,
            send_email_to_provider=True,
            provider_data=json.dumps(provider_data)
        )
    elif query.data == "animate":
        await query.edit_message_text("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –æ–∂–∏–≤–∏—Ç—å:")
        context.user_data["awaiting_animation"] = True
