import os
import sys
import asyncio
import logging
import json

from dotenv import load_dotenv
import openai

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# Windows policy
if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# Load env
load_dotenv()
TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –°–æ—Å—Ç–æ—è–Ω–∏—è
GENERATE_DESCRIPTION = 1
USAGE_FILE = "usage.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–º–∏—Ç–æ–≤
def load_usage():
    if os.path.exists(USAGE_FILE):
        with open(USAGE_FILE, "r") as f:
            return json.load(f)
    return {}

def save_usage(usage):
    with open(USAGE_FILE, "w") as f:
        json.dump(usage, f)

# –ö–Ω–æ–ø–∫–∏
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ö° Start", callback_data="start")],
        [InlineKeyboardButton("üñº Generate", callback_data="generate")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="buy")]
    ])

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "start":
        await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    elif query.data == "generate":
        await query.edit_message_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        context.user_data["awaiting_prompt"] = True
    elif query.data == "buy":
        await query.edit_message_text("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –§—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.")

# /generate
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    return GENERATE_DESCRIPTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    prompt = update.message.text

    usage = load_usage()
    user_usage = usage.get(user_id, {"count": 0, "limit": 5})

    if user_usage["count"] >= user_usage["limit"]:
        await update.message.reply_text(
            "‚ùó –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤—Å–µ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n"
            "üí≥ –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –û–ø–ª–∞—Ç–∏ 500‚ÇΩ –∑–∞ 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π."
        )
        return -1

    await update.message.reply_text("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏ 10‚Äì15 —Å–µ–∫—É–Ω–¥...")

    try:
        response = openai.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024",
            quality="standard",
        )
        image_url = response.data[0].url
        await update.message.reply_photo(photo=image_url, caption="–ì–æ—Ç–æ–≤–æ!")

        user_usage["count"] += 1
        usage[user_id] = user_usage
        save_usage(usage)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    return -1

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# /reset <user_id>
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = 7819868423  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
    if update.effective_user.id != admin_id:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /reset <user_id>")
        return

    target_id = context.args[0]
    usage = load_usage()

    if target_id in usage:
        usage[target_id]["count"] = 0
        save_usage(usage)
        await update.message.reply_text(f"‚úÖ –°–±—Ä–æ—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è {target_id}")
    else:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ó–∞–ø—É—Å–∫
def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    conversation = ConversationHandler(
        entry_points=[CommandHandler("generate", generate)],
        states={GENERATE_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prompt)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(conversation)

    app.run_polling()

if __name__ == "__main__":
    main()


